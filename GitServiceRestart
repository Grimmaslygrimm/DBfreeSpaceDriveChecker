[CmdletBinding()]
param( 
    [Parameter(
        Mandatory=$true,
        HelpMessage="Choose servers: "
    )]
    [ValidateSet("Test")] # add server display names here
    [string[]]$SelectedServerGroups,

    [Parameter()]
    [string]$serviceName = "Example_Service",

    [Parameter(
        Mandatory=$true,
        HelpMessage="Enter Credentials: "
    )]
    [PSCredential]$cred,

    [Parameter()]
    [int]
    $timeoutSeconds = 30
)

$ServerGroupsMap = @{
    Test = @("Server_URL_Here")
}

#Functions ------------------------------------------------------------FNC

function TestServiceAndStatus {
    param (
        [string]$serviceName
    )

     #Write-Host "Inside Test-ServiceAndStatus function" -ForegroundColor Magenta

        $serviceExists = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
    
        return @{
            Found = ($null -ne $serviceExists)
            Status = if ($serviceExists) { $serviceExists.Status.ToString() } else { "Not Found" }
            }

}

function Test-ServerConnection {
    param (
        [string]$server
    )

    try {
        $pingResult = Test-Connection -ComputerName $server -Count 2 -ErrorAction Stop
        Write-Host "Ping successful (avg: $($pingResult | Measure-Object ResponseTime -Average | 
                    Select-Object -ExpandProperty Average)ms)" -ForegroundColor Green
            
            try {
                Test-WSMan -ComputerName $server -ErrorAction Stop | Out-Null
                Write-Host "PowerShell Remoting is responding - check credentials" -ForegroundColor Yellow
               } catch {
                   Write-Host "PowerShell Remoting is not responding on $server" -ForegroundColor Red
            }
    } catch {
        Write-Host "Cannot ping $server - server appears to be unreachable" -ForegroundColor Red
    }
}

#Iterate through group array to allow multiple sites
foreach ($group in $SelectedServerGroups) {
    
    Write-Host "Processing: $group"
    $serversInGroup = $ServerGroupsMap[$group]

    #Iterate through individual servers in the groups   
    foreach ($server in $serversInGroup) {

    try {

        Write-Host "Attempting to connect to $server..." -ForegroundColor Yellow
        $session = New-PSSession -ComputerName $server -Credential $cred

        if ($null -eq $session) {
        Write-Host "Session is null!" -ForegroundColor Red
        continue
        }

        Write-Host "Session State: $($session.State)" -ForegroundColor Yellow
        Write-Host "Session created successfully for $server" -ForegroundColor Green

        Invoke-Command -Session $session -ScriptBlock {
            function Set-ServiceState {
                param (
                    [Parameter(Mandatory=$true)]    
                    [int]$timeoutSeconds,

                    [Parameter(Mandatory=$true)]
                    [string]$serviceName,

                    [Parameter(Mandatory=$true)]
                    [ValidateSet("Start", "Stop")]
                    [string]$action
                )
                
                # attempt to start/stop with one function
                $targetState = if ($action -eq "Start") { "Running" } else { "Stopped" }
                $actionCommand = if ($action -eq "Start") { "start" } else { "stop" }
                
                try {
                    if ($action -eq "Start") {
                        Start-Service -Name $serviceName -ErrorAction Stop
                    } else {
                        Stop-Service -Name $serviceName -ErrorAction Stop
                    }
                    
                    $startTime = Get-Date
                    
                    while ($true) {
                        try {
                            $serviceStatus = (Get-Service -Name $serviceName -ErrorAction Stop).Status
                            
                            if ($serviceStatus -eq $targetState) {
                                Write-Host "$serviceName is $targetState!" -ForegroundColor Green
                                break
                            }

                            $elapsed = (Get-Date) - $startTime
                            if ($elapsed.TotalSeconds -gt $timeoutSeconds) {
                                Write-Host "Timeout reached waiting for $serviceName to $actionCommand after $timeoutSeconds seconds" -ForegroundColor Yellow
                                break
                            }

                            Write-Host "$serviceName status: $serviceStatus. Waiting..." -ForegroundColor Yellow
                            Start-Sleep -Seconds 2

                        } catch {
                            Write-Host "$serviceName not found or error occurred: $($_.Exception.Message)" -ForegroundColor Red
                            break
                        }
                    }
                } catch {
                    Write-Host "Failed to $actionCommand $serviceName : $($_.Exception.Message)" -ForegroundColor Red
                }
            }

            function Restart-TargetService {
                param (
                    [int]$timeoutSeconds,
                    [string]$serviceName
                )

                Write-Host "Restarting $serviceName"

                Set-ServiceState -serviceName $serviceName -timeoutSeconds $timeoutSeconds -Action "Stop"
                Set-ServiceState -serviceName $serviceName -timeoutSeconds $timeoutSeconds -Action "Start"
                
                Start-Sleep -Seconds 1
                $serviceStatus = (Get-Service -Name $serviceName -ErrorAction Stop).Status
                
                if ($serviceStatus -eq "Running") {
                    Write-Host "$serviceName restarted successfully" -ForegroundColor Green
                } else {
                    Write-Host "$serviceName did not restart correctly: $serviceStatus" -ForegroundColor Red
                }
                
                
            }
        }

        $serviceInfo = Invoke-Command -Session $session -ScriptBlock ${function:TestServiceAndStatus} -ArgumentList $serviceName

        #error out if no service was found
        if (! $serviceInfo.Found) {
            Write-Host "$serviceName could not be found on server: $server)" -ForegroundColor Red
            continue
        }

        Write-Host "Current status of '$serviceName': $($serviceInfo.Status)"

        if ($serviceInfo.Status -ne "Running") {
            Write-Host "Warning: $serviceName is not currently running!" -ForegroundColor Yellow
            
            while ($true) { # attempt start menu
                Write-Host
                $continuePrompt = Read-Host "Would you like to attempt to start it for $group / $server ? (y/n)"
            
                if ($continuePrompt -eq "y") {
                    Invoke-Command -Session $session -ScriptBlock {
                        Set-ServiceState -timeoutSeconds $using:timeoutSeconds -serviceName $using:serviceName -Action "Start"
                    } 
                    
                    break
                } elseif ($continuePrompt -eq "n") {
                    Write-Host "Continuing to next server"
                    Break
                } else {
                    Write-Host "Incorrect input, please use (y/n)"
                    continue
                }
            }

            $serviceInfo = Invoke-Command -Session $session -ScriptBlock ${function:TestServiceAndStatus} -ArgumentList $serviceName

            if ($serviceInfo.Status -ne "Running") {
                Write-Host
                Write-Host "Failed to start, continuing to next server..."
                continue
            } else {
                Write-Host "$serviceName successfully started on $server , continuing..."
                continue
            }

        } elseif ($serviceInfo.Status -eq "Running") {    

            while ($true) { # service status menu

                Write-Host
                $restartConf = Read-Host "Print service Status on $group / $server ? (y/n)"
                Write-Host

                if ($restartConf -eq "y") {
                    Invoke-Command -Session $session -ScriptBlock {
                        try {
                            cmd /c "D: && service status" 2>&1
                        } catch {
                            Write-Host "Error running service status: $($_.Exception.Message)" -ForegroundColor Red
                        }
                    }
                    break
                } elseif ($restartConf -eq "n") {
                    Write-Host "Continuing..."
                    break
                } else {
                    Write-Host "Incorrect input, please use (y/n)"
                    continue
                }
            }

            while ($true) { # Restart service menu
                
                Write-Host
                $restartConf = Read-Host "Restart $serviceName on $group / $server ? (y/n)"
                Write-Host

                if ($restartConf -eq "y") {
                    Invoke-Command -Session $session -ScriptBlock {
                        Restart-TargetService -serviceName $using:serviceName -timeoutSeconds $using:timeoutSeconds
                    } 
                    break
                } elseif ($restartConf -eq "n") {
                    Write-Host "$serviceName on $server was not restarted, continuing..."
                    break
                } else {
                    Write-Host "Incorrect input, please use (y/n)"
                    continue
                }
            }

            $serviceInfo = Invoke-Command -Session $session -ScriptBlock ${function:TestServiceAndStatus} -ArgumentList $serviceName

            if ($serviceInfo.Status -ne "Running") {
                Write-Host
                Write-Host "Failed to start, continuing to next server..."
                continue
            } else {
                Write-Host "All good service restart confirmed, continuing..."
            }

        } else {
            Write-Host "an error occurred: $($_.Exception.Message)" -ForegroundColor Red
            continue
        }
    # Main try block Catch
    } catch {
        Write-Host "Error connecting..." -ForegroundColor Red
        Write-Host

        Test-ServerConnection -server $server

    } finally { # kill Session when done with server
            if ($session) {
                Remove-PSSession $session
            }
        }
    }
}

Write-Host
Write-Host "All servers operated"
Read-Host -Prompt "Enter to Exit"